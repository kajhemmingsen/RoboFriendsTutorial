{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/ErrorBoundry.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","cardArray","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,gCACA,6BAAKF,IACL,4BAAIC,WCWDK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAQ,cAAC,EAAD,CAEJT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAMb,OACI,8BACKH,KCAEI,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKX,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVY,KAAK,YACLC,YAAY,gBACZC,SAAUH,OCYXI,E,kDAlBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAG1B,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAKL,MAAMO,a,GAfCC,aCQZC,EARA,SAACT,GACZ,OACI,qBAAKU,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAA1C,SACKZ,EAAMO,YC0CJM,E,kDAvCX,aAAe,IAAD,8BACV,gBAYJC,eAAiB,SAACC,GACd,EAAKT,SAAS,CAACZ,YAAaqB,EAAMC,OAAOC,SAZzC,EAAKhB,MAAQ,CACTb,OAAQ,GACRM,YAAa,IAJP,E,gEAQO,IAAD,OAChBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKhB,SAAS,CAAElB,OAAQkC,S,+BAOjC,IAAD,OACCC,EAAiBlB,KAAKJ,MAAMb,OAAOoC,QAAO,SAAAC,GAC5C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAK1B,MAAMP,YAAYgC,kBAEpE,OAAKrB,KAAKJ,MAAMb,OAAOwC,OAIf,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWW,aAAcU,KAAKS,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQmC,WAR3B,6C,GAxBDf,aCKHqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.881c75d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='photo' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    const cardArray = robots.map((user, i) => {\r\n        return (<Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>\r\n    )});\r\n\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='searchbox' \r\n                placeholder='search robots'\r\n                onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true});\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>OOPS. THAT IS NOT GOOD</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport Scroll from '../Components/Scroll';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({ robots: users}));   \r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n        \r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            })\r\n        if (!this.state.robots.length) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <Searchbox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <Cardlist robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n        );}}\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}